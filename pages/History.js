// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as JsYaml from "js-yaml";
import * as Fs$Ocamlorg from "../bindings/Fs.js";
import * as TitleHeading$Ocamlorg from "../components/TitleHeading.js";
import * as MainContainer$Ocamlorg from "../components/MainContainer.js";
import * as SectionContainer$Ocamlorg from "../components/SectionContainer.js";
import * as ConstructionBanner$Ocamlorg from "../components/ConstructionBanner.js";

function History$Timeline$Item$VerticalBar(Props) {
  var bgColor = Props.bgColor;
  return React.createElement("span", {
              "aria-hidden": true,
              className: "absolute top-5 left-5 ml-0.5 h-full w-0.5 " + bgColor
            });
}

var VerticalBar = {
  make: History$Timeline$Item$VerticalBar
};

function History$Timeline$Item$Circle(Props) {
  var bgColor = Props.bgColor;
  return React.createElement("div", {
              className: "h-11 w-11 " + bgColor + " rounded-full flex"
            });
}

var Circle = {
  make: History$Timeline$Item$Circle
};

function History$Timeline$Item$Date(Props) {
  var content = Props.content;
  return React.createElement("div", {
              className: "text-3xl font-bold text-gray-900 mb-4"
            }, content);
}

var $$Date = {
  make: History$Timeline$Item$Date
};

function History$Timeline$Item$Description(Props) {
  var content = Props.content;
  return React.createElement("div", {
              className: "mt-2 text-base text-gray-700"
            }, React.createElement("p", undefined, content));
}

var Description = {
  make: History$Timeline$Item$Description
};

function History$Timeline$Item(Props) {
  var item = Props.item;
  var bgColor = "bg-yellowdark";
  return React.createElement("li", undefined, React.createElement("div", {
                  className: "relative pb-8"
                }, React.createElement(History$Timeline$Item$VerticalBar, {
                      bgColor: bgColor
                    }), React.createElement("div", {
                      className: "relative flex items-start space-x-3"
                    }, React.createElement(History$Timeline$Item$Circle, {
                          bgColor: bgColor
                        }), React.createElement("div", {
                          className: "min-w-0 flex-1"
                        }, React.createElement(History$Timeline$Item$Date, {
                              content: item.date
                            }), React.createElement(History$Timeline$Item$Description, {
                              content: item.description
                            })))));
}

var Item = {
  VerticalBar: VerticalBar,
  Circle: Circle,
  $$Date: $$Date,
  Description: Description,
  make: History$Timeline$Item
};

function History$Timeline(Props) {
  var content = Props.content;
  return React.createElement(SectionContainer$Ocamlorg.LargeCentered.make, {
              children: React.createElement("div", {
                    className: "flow-root"
                  }, React.createElement("ul", {
                        className: "-mb-8"
                      }, content.map(function (item, idx) {
                            return React.createElement(History$Timeline$Item, {
                                        item: item,
                                        key: idx.toString()
                                      });
                          }))),
              paddingY: "py-12",
              paddingX: "px-4"
            });
}

var Timeline = {
  Item: Item,
  make: History$Timeline
};

function forceInvalidException(c) {
  c.timeline.map(function (tl) {
        return [
                tl.date.length,
                tl.description.length
              ];
      });
  
}

function $$History(Props) {
  var content = Props.content;
  return React.createElement(React.Fragment, undefined, React.createElement(ConstructionBanner$Ocamlorg.make, {
                  figmaLink: "https://www.figma.com/file/Vha4bcBvNVrjyLmAEDgZ1x/History-Timeline?node-id=14%3A5"
                }), React.createElement(MainContainer$Ocamlorg.None.make, {
                  children: null
                }, React.createElement(TitleHeading$Ocamlorg.Large.make, {
                      title: content.title,
                      pageDescription: content.pageDescription
                    }), React.createElement(History$Timeline, {
                      content: content.timeline
                    })));
}

function getStaticProps(_ctxt) {
  var fileContents = Fs$Ocamlorg.readFileSync("data/history.yaml");
  var pageContent = JsYaml.load(fileContents, undefined);
  forceInvalidException(pageContent);
  return Promise.resolve({
              props: {
                content: pageContent
              }
            });
}

var make = $$History;

var $$default = $$History;

export {
  Timeline ,
  forceInvalidException ,
  make ,
  $$default ,
  $$default as default,
  getStaticProps ,
  
}
/* react Not a pure module */
